/* defines a global variable which is available in all blocks, the global variable is accessable
   with env.${GLOBAL_VARIABLE_NAME}. It also works without the prefix env
*/
def imageName
def eklBackendWSVersion
def artifactEklBackendWS

def getImageRepository(String buildStage) {
    if(buildStage == 'dev') {
        return 'ekl-backend-ws-dev'
    }else if(buildStage == 'test') {
        return 'ekl-backend-ws-test'
    }else {
        return ''
    }
}

def getKubeconfig(String buildStage){
    if(buildStage == 'dev') {
        return 'SA_EKL_DEV_JENKINS'
    }else if(buildStage == 'test'){
        return 'SA_EKL_TEST_JENKINS'
    }else {
        return ''
    }
}

pipeline {
    agent any

    tools {
        maven 'apache-maven-3.9.6'
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    environment {
        registryNamespace = 'ponyworld'
        registryRepositoryEklAlpineJRE = 'ekl-alpine-jre-21'
        builtTimestamp= sh(returnStdout:true, script:"date +%Y%m%dT%H%M%S").trim() //remove trailing newline
        targetEklAlpineJRE = 'ekl-alpine-jre'
        targetEklBackendWS = 'ekl-backend-ws'
    }

    parameters {
        choice(name: 'buildImageTarget', choices: ["ekl-backend-ws", 'ekl-alpine-jre'],
            description: 'select the target build stage of docker image, default ekl-backend-ws')

        string(name: 'imageTag', defaultValue: 'latest', description: 'give tag of the image ekl-alpine-jre')

        choice(name: 'buildStage', choices: ["dev", "test", "prod"],
            description: 'select the stage to be built and deployed, default dev')
    }

    stages {
        stage('Init build') {
            steps {
                script{ //Groovy syntax is allowed
                    def msg = sh(returnStdout:true, script:"""echo check out from Github Repository ${GIT_URL}
                                                              echo current branch ${GIT_BRANCH}""")
                    echo "Console output: ${msg}"
                    if(params.buildImageTarget == env.targetEklAlpineJRE) {
                        echo "Initialize build image ${env.targetEklAlpineJRE}"
                        env.imageName = "${registryNamespace}/${registryRepositoryEklAlpineJRE}:${params.imageTag}"
                    } else {
                        echo "Initialize build image ${env.targetEklBackendWS}"

                        env.imageTag = "${env.builtTimestamp}"
                        imageRepo = getImageRepository("${params.buildStage}")
                        env.imageName = "${env.registryNamespace}/${imageRepo}:${env.imageTag}"
                    }
                    echo "Initialization for build image ${env.imageName} done."

                    env.kubeconfig = getKubeconfig("${params.buildStage}")
                    echo "Use kubeconfig ${env.kubeconfig}"
                }
            }
        }

        stage('Maven build'){
            when {
                equals(actual: params.buildImageTarget, expected: env.targetEklBackendWS)
            }
            steps {
                script {
                        env.eklBackendWSVersion = sh(returnStdout: true, script: "mvn -f ekl-backend-ws/pom.xml \
                            -q help:evaluate -Dexpression=project.version -DforceStdout")
                        env.artifactEklBackendWS = "ekl-backend-ws-${env.eklBackendWSVersion}.jar"
                        echo "build artifact ${env.artifactEklBackendWS}"
                        sh "java -version"
                        sh "mvn -DskipTests clean package"
                }
            }
        }

        stage('Build Image'){
            steps {
                script {
                        echo "Build docker image ${env.imageName}"
                        sh """
                            cd ekl-backend-ws
                            docker build --target ${params.buildImageTarget} -t ${env.imageName} \
                                --build-arg ARTIFACT_EKL_BE_WS_NAME=${env.artifactEklBackendWS} .
                        """
                }
            }
        }

        stage('Push Image'){
            steps {
                echo "Push image ${env.imageName} to Docker Hub"
                script {
                    docker.withRegistry('','DOCKERHUB_TOKEN_PONYWORLD') {
                        sh """
                            docker push ${env.imageName}
                            docker image rm ${env.imageName}
                        """
                    }
                }
            }
        }

        stage('Deploy to ekl-k8s'){
            steps {
                echo "Deploy with kubeconfig ${env.kubeconfig}"
                withKubeConfig([credentialsId: "${env.kubeconfig}"]){
                    sh """
                        sed -i -e 's/{{IMAGE_TAG}}/${env.imageTag}/g' \
                            ekl-backend-ws/k8s/overlay/${params.buildStage}/kustomization.yaml
                        export KUBECONFIG=$KUBECONFIG
                        kubectl apply -k ekl-backend-ws/k8s/overlay/${params.buildStage}
                        kubectl rollout status deployment/ekl-backend-ws-${params.buildStage}
                        kubectl get all -n ekl-k8s-dev
                    """
                }
            }
        }
    }
}
