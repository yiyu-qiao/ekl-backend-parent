pipeline {
    agent any

    tools {
        maven 'apache-maven-3.9.6'
    }

    options {
        timestamps()
    }

    environment {
        appName="ekl-backend-ws"
        imageTag= sh(returnStdout:true, script:"date +%Y%m%dT%H%M%S")
        imageName="ponyworld/${appName}:${imageTag}"
    }

    stages {
        stage('Init Git') {
            steps {
                script{ //Groovy syntax is allowed
                    def msg = sh(returnStdout:true, script:"""echo check out from Github Repository ${GIT_URL}
                                                              echo current branch ${GIT_BRANCH}""")
                    echo "Console output: ${msg}"
                }
            }
        }

        stage('Maven build'){
            steps {
//                 configFileProvider([configFile(fileId: 'global-maven-settings', variable: 'MAVEN_SETTINGS')]){
//                      sh "mvn -s $MAVEN_SETTINGS clean install"
                    sh """java -version
                          mvn -DskipTests clean package
                    """
//                 }
            }
        }

        stage('Build Image'){
            steps {
                echo "Build docker images ekl-backend-ws"
                sh """cd ekl-backend-ws
//                       docker build -t local/ekl-backend-ws:latest .
                        docker build -t ${imageName} \
                         .
                      docker tag local/ekl-backend-ws:latest ${imageName}
                      docker image rm local/ekl-backend-ws:latest
                """
            }
        }

        stage('Push Image'){
            steps {
                echo "Push image to Docker Hub"
                script {
                    docker.withRegistry('','Dockerhub_Token_Ponyworld') {
                        sh """
                            docker push ${imageName}
                            docker image rm ${imageName}
                        """
                    }
                }
            }
        }

//         stage('Deploy to Artifactory'){
//             steps {
//                 withCredentials([string(credentialsId: 'Artifactory_Access_Token_QiaoHanDev', variable: 'ARTIFACTORY_TOKEN')]){
//                     sh """
//                         #!/usr/bin/bash
//                         source ./script/upload-to-artifactory.sh
//                     """
//                 }
//             }
//         }
        
//         stage('Deploy ekl-backend-ws'){
//             steps {
//                 //withCredentials([usernamePassword(credentialsId:'SSH_Jenkins_User', usernameVariable: 'username', passwordVariable: 'password')]){
//                     script {
//                         def remote_ekl_backend = [:]
//                         remote_ekl_backend.name = remote_ekl_backend_name
//                         remote_ekl_backend.host = remote_ekl_backend_host
//                         remote_ekl_backend.allowAnyHosts = true
//                         remote_ekl_backend.user = remote_ekl_backend_username
//                         remote_ekl_backend.password = remote_ekl_backend_password
//                         sshCommand remote: remote_ekl_backend, command: 'hostname'
//                         sshCommand remote: remote_ekl_backend, command: 'ls -la'
//                         sshScript remote: remote_ekl_backend, script: 'script/stop-ekl-backend.sh'
//                         sshPut remote: remote_ekl_backend, from: 'target/ekl-backend-0.0.1-SNAPSHOT.jar', into: "${path_ekl_backend_artefact}/"
//                         sshCommand remote: remote_ekl_backend, command: "ls -la ${path_ekl_backend_artefact}/ekl-backend-0.0.1-SNAPSHOT.jar"
//                         sshPut remote: remote_ekl_backend, from: 'script/start-ekl-backend.sh', into: "${path_ekl_backend_artefact}/script/"
//                         sshCommand remote: remote_ekl_backend, command: "chmod u+x ${path_ekl_backend_artefact}/script/start-ekl-backend.sh"
//                         sshScript remote: remote_ekl_backend, script: 'script/start-silent-ekl-backend.sh'
//                     }
//                 //}
//             }
//         }
    }
}
