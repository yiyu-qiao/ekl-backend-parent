/* defines a global variable which is available in all blocks, the global variable is accessable
   with env.${GLOBAL_VARIABLE_NAME}. It also works without the prefix env
*/
def imageName
def eklBackendWSVersion
def artifactEklBackendWS

pipeline {
    agent any

    tools {
        maven 'apache-maven-3.9.6'
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    environment {
        registryNamespace = 'ponyworld'
        registryRepositoryEklBackendWS = 'ekl-backend-ws'
        registryRepositoryEklAlpineJRE = 'ekl-alpine-jre-21'
        builtTimestamp= sh(returnStdout:true, script:"date +%Y%m%dT%H%M%S").trim() //remove trailing newline
        targetEklAlpineJRE = 'ekl-alpine-jre'
        targetEklBackendWS = 'ekl-backend-ws'
    }

    parameters {
        choice(name: 'buildImageTarget', choices: ["ekl-backend-ws", 'ekl-alpine-jre'],
            description: 'select the target build stage of docker image, default ekl-backend-ws')

        string(name: 'imageTag', defaultValue: 'latest', description: 'give tag of the image ekl-alpine-jre')
    }

    stages {
        stage('Init build') {
            steps {
                script{ //Groovy syntax is allowed
                    def msg = sh(returnStdout:true, script:"""echo check out from Github Repository ${GIT_URL}
                                                              echo current branch ${GIT_BRANCH}""")
                    echo "Console output: ${msg}"
                    if(params.buildImageTarget == env.targetEklAlpineJRE) {
                        echo "Initialize build image ${env.targetEklAlpineJRE}"
                        env.imageName = "${registryNamespace}/${registryRepositoryEklAlpineJRE}:${params.imageTag}"
                    } else {
                        echo "Initialize build image ${env.targetEklBackendWS}"
                        env.imageName = "${registryNamespace}/${registryRepositoryEklBackendWS}:${env.builtTimestamp}"
                    }
                    echo "Initialization for build image ${env.imageName} done."
                }
            }
        }

        stage('Maven build'){
            when {
                equals(actual: params.buildImageTarget, expected: env.targetEklBackendWS)
            }
            steps {
                script {
                        env.eklBackendWSVersion = sh(returnStdout: true, script: "mvn -f ekl-backend-ws/pom.xml -q help:evaluate -Dexpression=project.version -DforceStdout")
                        env.artifactEklBackendWS = "ekl-backend-ws-${env.eklBackendWSVersion}.jar"
                        echo "build artifact ${env.artifactEklBackendWS}"
                        sh "java -version"
                        sh "mvn -DskipTests clean package"
                }
            }
        }

        stage('Build Image'){
            steps {
                script {
                        echo "Build docker image ${env.imageName}"
                        sh """
                            cd ekl-backend-ws
                            docker build --target ${params.buildImageTarget} -t ${env.imageName} --build-arg ARTIFACT_EKL_BE_WS_NAME=${env.artifactEklBackendWS} .
                        """
                }
            }
        }

        stage('Push Image'){
            steps {
                echo "Push image ${env.imageName} to Docker Hub"
                script {
                    docker.withRegistry('','DOCKERHUB_TOKEN_PONYWORLD') {
                        sh """
                            docker push ${env.imageName}
                            docker image rm ${env.imageName}
                        """
                    }
                }
            }
        }

        stage('Deploy to ekl-k8s'){
            withKubeConfig([credentialsId: 'EKL_K8S_ADMIN']){
                sh """
                    kubectl get all -n ekl-k8s-dev
                """
            }
        }
//         stage('Deploy to Artifactory'){
//             steps {
//                 withCredentials([string(credentialsId: 'Artifactory_Access_Token_QiaoHanDev', variable: 'ARTIFACTORY_TOKEN')]){
//                     sh """
//                         #!/usr/bin/bash
//                         source ./script/upload-to-artifactory.sh
//                     """
//                 }
//             }
//         }
        
//         stage('Deploy ekl-backend-ws'){
//             steps {
//                 //withCredentials([usernamePassword(credentialsId:'SSH_Jenkins_User', usernameVariable: 'username', passwordVariable: 'password')]){
//                     script {
//                         def remote_ekl_backend = [:]
//                         remote_ekl_backend.name = remote_ekl_backend_name
//                         remote_ekl_backend.host = remote_ekl_backend_host
//                         remote_ekl_backend.allowAnyHosts = true
//                         remote_ekl_backend.user = remote_ekl_backend_username
//                         remote_ekl_backend.password = remote_ekl_backend_password
//                         sshCommand remote: remote_ekl_backend, command: 'hostname'
//                         sshCommand remote: remote_ekl_backend, command: 'ls -la'
//                         sshScript remote: remote_ekl_backend, script: 'script/stop-ekl-backend.sh'
//                         sshPut remote: remote_ekl_backend, from: 'target/ekl-backend-0.0.1-SNAPSHOT.jar', into: "${path_ekl_backend_artefact}/"
//                         sshCommand remote: remote_ekl_backend, command: "ls -la ${path_ekl_backend_artefact}/ekl-backend-0.0.1-SNAPSHOT.jar"
//                         sshPut remote: remote_ekl_backend, from: 'script/start-ekl-backend.sh', into: "${path_ekl_backend_artefact}/script/"
//                         sshCommand remote: remote_ekl_backend, command: "chmod u+x ${path_ekl_backend_artefact}/script/start-ekl-backend.sh"
//                         sshScript remote: remote_ekl_backend, script: 'script/start-silent-ekl-backend.sh'
//                     }
//                 //}
//             }
//         }
    }
}
